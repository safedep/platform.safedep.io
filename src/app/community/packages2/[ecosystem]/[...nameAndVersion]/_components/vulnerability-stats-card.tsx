import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Vulnerability } from "@buf/safedep_api.bufbuild_es/safedep/messages/vulnerability/v1/vulnerability_pb";
import { Severity_Risk } from "@buf/safedep_api.bufbuild_es/safedep/messages/vulnerability/v1/severity_pb";
import { Badge } from "@/components/ui/badge";

export function countVulnerabilitiesBySeverity(
  vulnerabilities: Vulnerability[],
) {
  return vulnerabilities.reduce(
    (counts, vuln) => {
      let maxRisk = Severity_Risk.UNSPECIFIED;
      for (const s of vuln.severities) {
        if (s.risk > maxRisk) {
          maxRisk = s.risk;
        }
      }

      switch (maxRisk) {
        case Severity_Risk.CRITICAL:
          counts.critical++;
          break;
        case Severity_Risk.HIGH:
          counts.high++;
          break;
        case Severity_Risk.MEDIUM:
          counts.medium++;
          break;
        case Severity_Risk.LOW:
          counts.low++;
          break;
        default: {
          const score = parseFloat(vuln.severities[0]?.score ?? "0");
          if (score >= 9) {
            counts.critical++;
          } else if (score >= 7) {
            counts.high++;
          } else if (score >= 4) {
            counts.medium++;
          } else if (score > 0) {
            counts.low++;
          }
        }
      }
      return counts;
    },
    { critical: 0, high: 0, medium: 0, low: 0 },
  );
}

export default function VulnerabilityStatsCard({
  vulnerabilities,
}: {
  vulnerabilities: Vulnerability[];
}) {
  const totalVulnerabilities = vulnerabilities.length;
  const severityCounts = countVulnerabilitiesBySeverity(vulnerabilities);

  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerabilities</CardTitle>
      </CardHeader>
      <CardContent className="flex-1">
        <div className="text-center">
          <div className="text-3xl font-bold">{totalVulnerabilities}</div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-center">
        {/* Severity breakdown */}
        {totalVulnerabilities > 0 && (
          <div className="grid grid-cols-4 gap-2 border-t pt-2">
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">Critical</div>
              <Badge variant="destructive" className="text-xs">
                {severityCounts.critical}
              </Badge>
            </div>
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">High</div>
              <Badge
                variant="secondary"
                className="bg-orange-100 text-xs text-orange-800"
              >
                {severityCounts.high}
              </Badge>
            </div>
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">Medium</div>
              <Badge
                variant="secondary"
                className="bg-yellow-100 text-xs text-yellow-800"
              >
                {severityCounts.medium}
              </Badge>
            </div>
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">Low</div>
              <Badge variant="secondary" className="text-xs">
                {severityCounts.low}
              </Badge>
            </div>
          </div>
        )}
      </CardFooter>
    </Card>
  );
}
