import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Vulnerability } from "@buf/safedep_api.bufbuild_es/safedep/messages/vulnerability/v1/vulnerability_pb";
import { Severity_Risk } from "@buf/safedep_api.bufbuild_es/safedep/messages/vulnerability/v1/severity_pb";
import { Badge } from "@/components/ui/badge";
import { getHighestSeverityRisk } from "@/utils/severity";

export function countVulnerabilitiesBySeverity(
  vulnerabilities: Vulnerability[],
) {
  const counts = {
    critical: 0,
    high: 0,
    medium: 0,
    low: 0,
  };

  for (const vuln of vulnerabilities) {
    const severities = vuln.severities;
    const highestRisk = getHighestSeverityRisk(severities);

    if (highestRisk !== Severity_Risk.UNSPECIFIED) {
      switch (highestRisk) {
        case Severity_Risk.CRITICAL:
          counts.critical++;
          break;
        case Severity_Risk.HIGH:
          counts.high++;
          break;
        case Severity_Risk.MEDIUM:
          counts.medium++;
          break;
        case Severity_Risk.LOW:
          counts.low++;
          break;
        default:
          break;
      }
      continue;
    }

    // Fallback to highest numeric score across severities (CVSS mapping)
    let maxScore = 0;
    for (const s of severities) {
      const parsed = parseFloat(s.score || "0");
      if (!Number.isNaN(parsed) && parsed > maxScore) {
        maxScore = parsed;
      }
    }

    if (maxScore >= 9.0) {
      counts.critical++;
    } else if (maxScore >= 7.0) {
      counts.high++;
    } else if (maxScore >= 4.0) {
      counts.medium++;
    } else if (maxScore > 0) {
      counts.low++;
    } else {
      counts.low++;
    }
  }

  return counts;
}

export default function VulnerabilityStatsCard({
  vulnerabilities,
}: {
  vulnerabilities: Vulnerability[];
}) {
  const totalVulnerabilities = vulnerabilities.length;
  const severityCounts = countVulnerabilitiesBySeverity(vulnerabilities);

  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerabilities</CardTitle>
      </CardHeader>
      <CardContent className="flex-1">
        <div className="text-center">
          <div className="text-3xl font-bold">{totalVulnerabilities}</div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-center">
        {/* Severity breakdown */}
        {totalVulnerabilities > 0 && (
          <div className="flex flex-wrap gap-3 border-t pt-2">
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">Critical</div>
              <Badge variant="destructive" className="text-xs">
                {severityCounts.critical}
              </Badge>
            </div>
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">High</div>
              <Badge
                variant="secondary"
                className="bg-orange-100 text-xs text-orange-800"
              >
                {severityCounts.high}
              </Badge>
            </div>
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">Medium</div>
              <Badge
                variant="secondary"
                className="bg-yellow-100 text-xs text-yellow-800"
              >
                {severityCounts.medium}
              </Badge>
            </div>
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">Low</div>
              <Badge variant="secondary" className="text-xs">
                {severityCounts.low}
              </Badge>
            </div>
          </div>
        )}
      </CardFooter>
    </Card>
  );
}
