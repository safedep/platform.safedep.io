"use client";

import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Package,
  Loader2,
  ChevronDown,
  Shield,
  AlertTriangle,
} from "lucide-react";
import ReactMarkdown from "react-markdown";
import {
  QueryPackageAnalysisResponse,
  AnalysisStatus,
} from "@buf/safedep_api.bufbuild_es/safedep/services/malysis/v1/malysis_pb";
import { Report_Evidence_Confidence } from "@buf/safedep_api.bufbuild_es/safedep/messages/malysis/v1/report_pb";
import {
  MalwareStatus,
  getMalwareAnalysisStatus,
} from "../utils/package-safety";

interface MalwareAnalysisDisplayProps {
  malwareAnalysis: QueryPackageAnalysisResponse | null | undefined;
  isLoading: boolean;
}

export default function MalwareAnalysisDisplay({
  malwareAnalysis,
  isLoading,
}: MalwareAnalysisDisplayProps) {
  // Helper function for confidence display
  const getConfidenceName = (confidence: Report_Evidence_Confidence) => {
    switch (confidence) {
      case Report_Evidence_Confidence.HIGH:
        return "High";
      case Report_Evidence_Confidence.MEDIUM:
        return "Medium";
      case Report_Evidence_Confidence.LOW:
        return "Low";
      default:
        return "Unknown";
    }
  };

  // Helper function for analysis status display
  const getAnalysisStatusDisplay = () => {
    if (isLoading) {
      return {
        icon: <Loader2 className="h-5 w-5 animate-spin" />,
        text: "Analyzing package...",
        color: "text-blue-600",
        emoji: "üîç",
      };
    }

    if (
      !malwareAnalysis ||
      malwareAnalysis.status !== AnalysisStatus.COMPLETED
    ) {
      return {
        icon: <AlertTriangle className="h-5 w-5" />,
        text: "Analysis not available",
        color: "text-gray-600",
        emoji: "‚ùì",
      };
    }

    const malwareAnalysisStatus = getMalwareAnalysisStatus(malwareAnalysis);

    switch (malwareAnalysisStatus) {
      case MalwareStatus.Malicious:
        return {
          icon: <AlertTriangle className="h-5 w-5" />,
          text: "Malware Detected",
          color: "text-red-600",
          emoji: "‚ö†Ô∏è",
        };
      case MalwareStatus.PossiblyMalicious:
        return {
          icon: <AlertTriangle className="h-5 w-5" />,
          text: "Possibly Malicious",
          color: "text-orange-600",
          emoji: "‚ö†Ô∏è",
        };
      case MalwareStatus.Unknown:
        return {
          icon: <AlertTriangle className="h-5 w-5" />,
          text: "Unknown",
          color: "text-gray-600",
          emoji: "‚ùì",
        };
      default:
        return {
          icon: <Shield className="h-5 w-5" />,
          text: "Clean Package",
          color: "text-green-600",
          emoji: "‚úÖ",
        };
    }
  };

  const statusDisplay = getAnalysisStatusDisplay();

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center gap-2">
          <span className={`text-lg font-semibold ${statusDisplay.color}`}>
            {statusDisplay.emoji} {statusDisplay.text}
          </span>
          {malwareAnalysis?.verificationRecord && (
            <Badge
              variant="outline"
              className="border-blue-200 bg-blue-100 text-blue-800"
            >
              Verified
            </Badge>
          )}
        </div>
      </CardHeader>
      <CardContent className="space-y-6">
        {isLoading ? (
          <LoadingState />
        ) : !malwareAnalysis ||
          malwareAnalysis.status !== AnalysisStatus.COMPLETED ? (
          <EmptyState />
        ) : (
          <AnalysisContent
            malwareAnalysis={malwareAnalysis}
            getConfidenceName={getConfidenceName}
          />
        )}
      </CardContent>
    </Card>
  );
}

// Loading state component
function LoadingState() {
  return (
    <div className="flex items-center justify-center py-8">
      <div className="text-center">
        <Loader2 className="mx-auto mb-4 h-8 w-8 animate-spin text-blue-600" />
        <p className="text-muted-foreground">
          Analyzing package for security threats...
        </p>
      </div>
    </div>
  );
}

// Empty state component
function EmptyState() {
  return (
    <div className="flex items-center justify-center py-8">
      <div className="text-center">
        <AlertTriangle className="mx-auto mb-4 h-8 w-8 text-gray-400" />
        <p className="text-muted-foreground">
          No malware analysis available for this package version.
        </p>
      </div>
    </div>
  );
}

// Main analysis content component
function AnalysisContent({
  malwareAnalysis,
  getConfidenceName,
}: {
  malwareAnalysis: QueryPackageAnalysisResponse;
  getConfidenceName: (confidence: Report_Evidence_Confidence) => string;
}) {
  return (
    <>
      {/* Verification Record */}
      {malwareAnalysis.verificationRecord && (
        <VerificationRecordSection
          verificationRecord={malwareAnalysis.verificationRecord}
        />
      )}

      {/* Analysis Summary */}
      {(malwareAnalysis.report?.inference?.summary ||
        malwareAnalysis.report?.inference?.details) && (
        <AnalysisSummarySection inference={malwareAnalysis.report.inference} />
      )}

      {/* Evidence Table */}
      {((malwareAnalysis.report?.fileEvidences &&
        malwareAnalysis.report.fileEvidences.length > 0) ||
        (malwareAnalysis.report?.projectEvidences &&
          malwareAnalysis.report.projectEvidences.length > 0)) && (
        <EvidenceTableSection
          report={malwareAnalysis.report}
          getConfidenceName={getConfidenceName}
        />
      )}
    </>
  );
}

// Verification Record Section
function VerificationRecordSection({
  verificationRecord,
}: {
  verificationRecord: any;
}) {
  return (
    <div className="space-y-4 rounded-lg border bg-slate-50/50 p-6">
      <div className="flex items-center gap-2">
        <Shield className="h-5 w-5 text-blue-600" />
        <h3 className="text-lg font-semibold">Verification Record</h3>
      </div>
      <div className="grid gap-4">
        {verificationRecord.reason && (
          <div>
            <h4 className="mb-2 text-sm font-medium text-gray-700">Reason</h4>
            <div className="prose prose-sm max-w-none text-gray-600">
              <ReactMarkdown>{verificationRecord.reason}</ReactMarkdown>
            </div>
          </div>
        )}
        {verificationRecord.extraAnalysis && (
          <div>
            <h4 className="mb-2 text-sm font-medium text-gray-700">
              Extra Analysis
            </h4>
            <div className="prose prose-sm max-w-none text-gray-600">
              <ReactMarkdown>{verificationRecord.extraAnalysis}</ReactMarkdown>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

// Analysis Summary Section
function AnalysisSummarySection({ inference }: { inference: any }) {
  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2">
        <Package className="h-5 w-5 " />
        <h3 className="text-lg font-semibold">Analysis Summary</h3>
      </div>

      {inference.summary && (
        <div>
          <h4 className="mb-2 text-sm font-medium text-gray-700">Summary</h4>
          <div className="prose prose-sm max-w-none text-gray-600">
            <ReactMarkdown>{inference.summary}</ReactMarkdown>
          </div>
        </div>
      )}

      {inference.details && (
        <div>
          <h4 className="mb-2 text-sm font-medium text-gray-700">Details</h4>
          <div className="prose prose-sm max-w-none text-gray-600">
            <ReactMarkdown>{inference.details}</ReactMarkdown>
          </div>
        </div>
      )}
    </div>
  );
}

// Evidence Table Section
function EvidenceTableSection({
  report,
  getConfidenceName,
}: {
  report: any;
  getConfidenceName: (confidence: Report_Evidence_Confidence) => string;
}) {
  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2">
        <AlertTriangle className="h-5 w-5" />
        <h3 className="text-lg font-semibold">Analysis Evidence</h3>
      </div>
      <div className="overflow-hidden rounded-lg border">
        <Table>
          <TableHeader>
            <TableRow className="bg-gray-50/50">
              <TableHead className="font-semibold">Type</TableHead>
              <TableHead className="font-semibold">File</TableHead>
              <TableHead className="font-semibold">Confidence</TableHead>
              <TableHead className="font-semibold">Description</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {/* File Evidences */}
            {report.fileEvidences?.map((fileEvidence: any, index: number) => (
              <EvidenceRow
                key={`file-${index}`}
                type="File Evidence"
                fileKey={fileEvidence.fileKey || "N/A"}
                evidence={fileEvidence.evidence}
                evidenceId={`file-evidence-${index}`}
                getConfidenceName={getConfidenceName}
              />
            ))}

            {/* Project Evidences */}
            {report.projectEvidences?.map(
              (projectEvidence: any, index: number) => (
                <EvidenceRow
                  key={`project-${index}`}
                  type="Project Evidence"
                  fileKey="Project Level"
                  evidence={projectEvidence.evidence}
                  evidenceId={`project-evidence-${index}`}
                  getConfidenceName={getConfidenceName}
                />
              ),
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

// Evidence Row Component
function EvidenceRow({
  type,
  fileKey,
  evidence,
  evidenceId,
  getConfidenceName,
}: {
  type: string;
  fileKey: string;
  evidence: any;
  evidenceId: string;
  getConfidenceName: (confidence: Report_Evidence_Confidence) => string;
}) {
  return (
    <React.Fragment>
      <TableRow className="hover:bg-gray-50/50">
        <TableCell className="font-medium">{type}</TableCell>
        <TableCell className="font-mono text-sm">{fileKey}</TableCell>
        <TableCell>
          <Badge
            variant="outline"
            className={` ${
              evidence?.confidence === Report_Evidence_Confidence.HIGH
                ? "border-red-200 bg-red-100 text-red-800"
                : evidence?.confidence === Report_Evidence_Confidence.MEDIUM
                  ? "border-yellow-200 bg-yellow-100 text-yellow-800"
                  : "border-blue-200 bg-blue-100 text-blue-800"
            }`}
          >
            {getConfidenceName(
              evidence?.confidence || Report_Evidence_Confidence.UNSPECIFIED,
            )}
          </Badge>
        </TableCell>
        <TableCell className="max-w-xl">
          <button
            className="flex items-center gap-2 transition-colors hover:text-blue-600"
            onClick={() => {
              const allDetails = document.querySelectorAll(".evidence-details");
              allDetails.forEach((detail) => detail.classList.add("hidden"));

              const currentDetail = document.getElementById(evidenceId);
              if (currentDetail) {
                currentDetail.classList.toggle("hidden");
              }
            }}
          >
            <span className="text-left">
              {evidence?.title || "View Details"}
            </span>
            <ChevronDown className="h-4 w-4 flex-shrink-0" />
          </button>
        </TableCell>
      </TableRow>
      <TableRow
        className="evidence-details hidden bg-slate-50/50"
        id={evidenceId}
      >
        <TableCell colSpan={4} className="p-6">
          <div className="prose prose-sm max-w-none">
            <ReactMarkdown>
              {evidence?.details || "No additional details available."}
            </ReactMarkdown>
          </div>
        </TableCell>
      </TableRow>
    </React.Fragment>
  );
}
