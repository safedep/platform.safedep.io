import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, Shield } from "lucide-react";
import { Vulnerability } from "@buf/safedep_api.bufbuild_es/safedep/messages/vulnerability/v1/vulnerability_pb";
import { Severity_Risk } from "@buf/safedep_api.bufbuild_es/safedep/messages/vulnerability/v1/severity_pb";

interface VulnerabilityStatsCardProps {
  vulnerabilities: Vulnerability[];
}

interface SeverityCount {
  critical: number;
  high: number;
  medium: number;
  low: number;
}

export default function VulnerabilityStatsCard({
  vulnerabilities,
}: VulnerabilityStatsCardProps) {
  const totalVulnerabilities = vulnerabilities.length;

  // Count vulnerabilities by severity
  const severityCounts = vulnerabilities.reduce<SeverityCount>(
    (counts, vuln) => {
      // For each vulnerability, check all its severities and get the highest risk
      const highestRisk = vuln.severities.reduce((maxRisk, severity) => {
        return severity.risk > maxRisk ? severity.risk : maxRisk;
      }, Severity_Risk.UNSPECIFIED);

      // Classify based on the highest risk level
      switch (highestRisk) {
        case Severity_Risk.CRITICAL:
          counts.critical++;
          break;
        case Severity_Risk.HIGH:
          counts.high++;
          break;
        case Severity_Risk.MEDIUM:
          counts.medium++;
          break;
        case Severity_Risk.LOW:
          counts.low++;
          break;
        default:
          // For unspecified, try to parse the score as a fallback
          const scoreNum = parseFloat(vuln.severities[0]?.score || "0");
          if (scoreNum >= 9.0) counts.critical++;
          else if (scoreNum >= 7.0) counts.high++;
          else if (scoreNum >= 4.0) counts.medium++;
          else if (scoreNum > 0) counts.low++;
      }

      return counts;
    },
    { critical: 0, high: 0, medium: 0, low: 0 },
  );

  const getCardVariant = () => {
    if (severityCounts.critical > 0) return "destructive";
    if (severityCounts.high > 0) return "warning";
    if (totalVulnerabilities > 0) return "caution";
    return "safe";
  };

  const getIconColor = () => {
    const variant = getCardVariant();
    switch (variant) {
      case "destructive":
        return "text-red-600";
      case "warning":
        return "text-orange-600";
      case "caution":
        return "text-yellow-600";
      default:
        return "text-green-600";
    }
  };

  return (
    <Card>
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center gap-2 text-lg">
          {totalVulnerabilities > 0 ? (
            <AlertTriangle className={`h-5 w-5 ${getIconColor()}`} />
          ) : (
            <Shield className={`h-5 w-5 ${getIconColor()}`} />
          )}
          Total Vulnerabilities
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Main count */}
        <div className="text-center">
          <div className={`text-3xl font-bold ${getIconColor()}`}>
            {totalVulnerabilities}
          </div>
          <p className="text-muted-foreground text-sm">
            {totalVulnerabilities === 0
              ? "No known vulnerabilities"
              : "Known vulnerabilities"}
          </p>
        </div>

        {/* Severity breakdown */}
        {totalVulnerabilities > 0 && (
          <div className="grid grid-cols-4 gap-2 border-t pt-2">
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">Critical</div>
              <Badge variant="destructive" className="text-xs">
                {severityCounts.critical}
              </Badge>
            </div>
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">High</div>
              <Badge
                variant="secondary"
                className="bg-orange-100 text-xs text-orange-800"
              >
                {severityCounts.high}
              </Badge>
            </div>
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">Medium</div>
              <Badge
                variant="secondary"
                className="bg-yellow-100 text-xs text-yellow-800"
              >
                {severityCounts.medium}
              </Badge>
            </div>
            <div className="text-center">
              <div className="text-muted-foreground mb-1 text-xs">Low</div>
              <Badge variant="secondary" className="text-xs">
                {severityCounts.low}
              </Badge>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
